snippet type "type <name> struct {...}"
    type ${1:name} struct {
	    $0
    }

snippet makes "make([]<T>, 0)"
    make([]$0, 0)

snippet makem "make(map[<key>]<value>, 0)"
    make(map[${1:key}]${2:value}, 0)
    $0

snippet fn "func name() {} free function"
    func ${1:Name}($2) $3 {
	    $0
	    return $4
    }

snippet fns "func (s *S) name() {} struct function"
    func (${1:this} *${2:Struct}) ${3:Name}($4) $5 {
	    $0
    }

snippet fnsr "func (s *S) name() {} struct function with return"
    func (${1:this} *${2:Struct}) ${3:Name}($4) $5 {
	    $0
	    return $6
    }

snippet test "func Test_(t *testing.T) test"
    func Test_${1}(t *testing.T) {
	    $0
    }

snippet date "2006-01-02T15:04:05Z07:00 (RFC3339)"
    "2006-01-02T15:04:05Z07:00"

snippet gracefulshutdown "Graceful shutdown with deadline"
    // graceful shutdown with deadline
    c := make(chan os.Signal, 1)
    signal.Notify(c, os.Interrupt)
    <-c

    ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
    defer cancel()
    srv.Shutdown(ctx)

snippet httphandler "stdlib HTTP handler"
    func $1(w http.ResponseWriter, r *http.Request) {
	    fmt.Fprintf(w, "$0")
    }

snippet jsonencode "json encode map[string]interface{}"
	json.NewEncoder($1).Encode(map[string]interface{}{
		$0,
	})

snippet fmterr "fmt.Errorf"
    fmt.Errorf("$0: %w", err)

snippet ife "if err != nil {"
    if err != nil {
	    return fmt.Errorf("$0: %w", err)
    }

snippet logoutput "set log output"
    f, err := os.OpenFile("$0test.log", os.O_APPEND|os.O_CREATE|os.O_RDWR, 0666)
    if err != nil {
	    panic("Can't create log file")
    }
    defer f.Close()

    log.SetOutput(f)

snippet testhttp "test http"
    req := httptest.NewRequest(http.MethodGet, "/", nil)
    w := httptest.NewRecorder()
    handler(w, req)
    res := w.Result()
    defer res.Body.Close()
    data, err := ioutil.ReadAll(res.Body)

snippet fmtctc "debug string"
    fmt.Println(ctc.ForegroundYellow, $0, ctc.Reset)
